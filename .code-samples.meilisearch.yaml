# This code-samples file is used by the Meilisearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  await client.GetIndexAsync("movies");
list_all_indexes_1: |-
  await client.GetAllIndexesAsync(new IndexesQuery { Limit = 3 });
create_an_index_1: |-
  TaskInfo task = await client.CreateIndexAsync("movies", "id");
update_an_index_1: |-
  TaskInfo task = await client.UpdateIndexAsync("movies", "id");
delete_an_index_1: |-
  await client.DeleteIndexAsync("movies");
get_one_document_1: |-
  await client.Index("movies").GetDocumentAsync<Movie>(25684, new List<string> { "id", "title", "poster", "release_date" });
get_documents_1: |-
  await client.Index("movies").GetDocumentsAsync<Movie>(new DocumentsQuery() { Limit = 2 });
add_or_replace_documents_1: |-
  var movie = new[]
  {
      new Movie
      {
            Id = "287947",
            Title = "Shazam",
            Poster = "https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg",
            Overview = "A boy is given the ability to become an adult superhero in times of need with a single magic word.",
            ReleaseDate = "2019-03-23"
      }
  };
  await index.AddDocumentsAsync(movie);
add_or_update_documents_1: |-
  var movie = new[]
  {
      new Movie { Id = "287947", Title = "Shazam ⚡️", Genres = "comedy" }
  };
  await index.UpdateDocumentsAsync(movie);
delete_all_documents_1: |-
  await client.Index("movies").DeleteAllDocumentsAsync();
delete_one_document_1: |-
  await client.Index("movies").DeleteOneDocumentAsync("25684");
delete_documents_1: |-
  await client.Index("movies").DeleteDocumentsAsync(new[] { "23488", "153738", "437035", "363869" });
search_post_1: |-
  await client.Index("movies").SearchAsync<Movie>(new SearchQuery("American ninja"));
get_task_1: |
  TaskInfo task = await client.GetTaskAsync(1);
get_all_tasks_1: |
  ResourceResults<Task> taskResult = await client.GetTasksAsync();
get_settings_1: |-
  await client.Index("movies").GetSettingsAsync();
update_settings_1: |-
  Settings newSettings = new Settings
  {
    RankingRules = new string[]
    {
      "words",
      "typo",
      "proximity",
      "attribute",
      "sort",
      "exactness",
      "release_date:desc",
      "rank:desc"
    },
    DistinctAttribute = "movie_id",
    SearchableAttributes = new string[] { "title", "overview", "genres" },
    DisplayedAttributes = new string[] { "title", "overview", "genres", "release_date" },
    SortableAttributes = new string[] { "title", "release_date" },
    StopWords = new string[] { "the", "a", "an" },
    Synonyms = new Dictionary<string, IEnumerable<string>>
    {
      { "wolverine", new string[] { "xmen", "logan" } },
      { "logan", new string[] { "wolverine" } },
    },
    FilterableAttributes = new string[] { },
    TypoTolerance = new TypoTolerance
    {
        DisableOnAttributes = new string[] { "title" },
        MinWordSizeForTypos = new TypoTolerance.TypoSize
        {
            OneTypo = 8,
            TwoTypos = 10
        }
    }
  };
  TaskInfo task = await client.Index("movies").UpdateSettingsAsync(newFilters);
reset_settings_1: |-
  await client.Index("movies").ResetSettingsAsync();
get_synonyms_1: |-
  await client.Index("movies").GetSynonymsAsync();
update_synonyms_1: |-
  var synonyms = new Dictionary<string, IEnumerable<string>>
  {
  	{ "wolverine", new string[] { "xmen", "logan" } },
  	{ "logan", new string[] { "wolverine", "xmen" } },
    { "wow", new string[] { "world of warcraft" } }
  };
  await client.Index("movies").UpdateSynonymsAsync(synonyms);
reset_synonyms_1: |-
  await client.Index("movies").ResetSynonymsAsync();
get_stop_words_1: |-
  await client.Index("movies").GetStopWordsAsync();
update_stop_words_1: |-
  await client.Index("movies").UpdateStopWordsAsync(new[] {"of", "the", "to"});
reset_stop_words_1: |-
  await client.Index("movies").ResetStopWordsAsync();
get_ranking_rules_1: |-
  await client.Index("movies").GetRankingRulesAsync();
update_ranking_rules_1: |-
  await client.Index("movies").UpdateRankingRulesAsync(new[]
  {
      "words",
      "typo",
      "proximity",
      "attribute",
      "sort",
      "exactness",
      "release_date:asc",
      "rank:desc"
  });
reset_ranking_rules_1: |-
  await client.Index("movies").ResetRankingRulesAsync();
get_distinct_attribute_1: |-
  string result = await client.Index("shoes").GetDistinctAttributeAsync();
update_distinct_attribute_1: |-
  TaskInfo result = await client.Index("shoes").UpdateDistinctAttributeAsync("skuid");
reset_distinct_attribute_1: |-
  TaskInfo result = await client.Index("shoes").ResetDistinctAttributeAsync();
get_searchable_attributes_1: |-
  await client.Index("movies").GetSearchableAttributesAsync();
update_searchable_attributes_1: |-
  await client.Index("movies").UpdateSearchableAttributesAsync(new[] {"title", "overview", "genres"});
reset_searchable_attributes_1: |-
  await client.Index("movies").ResetSearchableAttributesAsync();
get_filterable_attributes_1: |-
  IEnumerable<string> attributes = await client.Index("movies").GetFilterableAttributesAsync();
update_filterable_attributes_1: |-
  List<string> attributes = new() { "genres", "director" };
  TaskInfo result = await client.Index("movies").UpdateFilterableAttributesAsync(attributes);
reset_filterable_attributes_1: |-
  TaskInfo result = await client.Index("movies").ResetFilterableAttributesAsync();
get_displayed_attributes_1: |-
  await client.Index("movies").GetDisplayedAttributesAsync();
update_displayed_attributes_1: |-
  await client.Index("movies").UpdateDisplayedAttributesAsync(new[]
  {
    "title",
    "overview",
    "genres",
    "release_date"
  });
reset_displayed_attributes_1: |-
  await client.Index("movies").ResetDisplayedAttributesAsync();
get_index_stats_1: |-
  await client.Index("movies").GetStatsAsync();
get_indexes_stats_1: |-
  await client.GetStatsAsync();
get_health_1: |-
  await client.HealthAsync();
get_version_1: |-
  await client.GetVersionAsync();
distinct_attribute_guide_1: |-
  await client.Index("jackets").UpdateDistinctAttributeAsync("product_id");
field_properties_guide_searchable_1: |-
  await client.Index("movies").UpdateSearchableAttributesAsync(new[]
  {
      "title",
      "overview",
      "genres"
  });
field_properties_guide_displayed_1: |-
  await client.Index("movies").UpdateDisplayedAttributesAsync(new[]
  {
      "title",
      "overview",
      "genres",
      "release_date"
  });
filtering_guide_1: |-
  SearchQuery filters = new SearchQuery("Avengers") { Filter = "release_date > \"795484800\"" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>(filters);
filtering_guide_2: |-
  SearchQuery filters = new SearchQuery("Batman") { Filter = "release_date > 795484800 AND (director =
  \"Tim Burton\" OR director = \"Christopher Nolan\")" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>(filters);
filtering_guide_3: |-
  SearchQuery filters = new SearchQuery("Planet of the Apes") { Filter = "rating >= 3 AND (NOT director = \"Tim Burton\"" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>(filters);
search_parameter_guide_query_1: |-
  await client.Index("movies").SearchAsync<Movie>(new SearchQuery("shifu"));
search_parameter_guide_offset_1: |-
  var sq = new SearchQuery("shifu")
  {
      Offset = 1
  };
  await client.Index("movies").SearchAsync<Movie>(sq);
search_parameter_guide_limit_1: |-
  var sq = new SearchQuery("shifu")
  {
      Limit = 2
  };
  await client.Index("movies").SearchAsync<Movie>(sq);
search_parameter_guide_retrieve_1: |-
  var sq = new SearchQuery("shifu")
  {
      AttributesToRetrieve = new[] {"overview", "title"}
  };
  await client.Index("movies").SearchAsync<Movie>(sq);
search_parameter_guide_crop_1: |-
  var sq = new SearchQuery("shifu")
  {
      AttributesToCrop = new[] {"overview"},
      CropLength = 5
  };
  await client.Index("movies").SearchAsync<Movie>(sq);
search_parameter_guide_highlight_1: |-
  var sq = new SearchQuery("winter feast")
  {
  	AttributesToHighlight = new[] {"overview"}
  };
  await client.Index("movies").SearchAsync<Movie>(sq);
search_parameter_guide_show_matches_position_1: |-
  await client.Index("movies").SearchAsync<T>(
    new SearchQuery("winter feast")
    {
        ShowMatchesPosition = True,
    });
settings_guide_synonyms_1: |-
  var newSettings = new Settings
  {
      Synonyms = new Dictionary<string, IEnumerable<string>>
      {
        { "sweater", new string[] { "jumper" } },
        { "jumper", new string[] { "sweater" } }
      }
  };
  await client.Index("tops").UpdateSettingsAsync(newSettings);
settings_guide_stop_words_1: |-
  var newSettings = new Settings
  {
  	StopWords = new[] {"the", "a", "an"}
  };
  await client.Index("movies").UpdateSettingsAsync(newSettings);
settings_guide_ranking_rules_1: |-
  var newSettings = new Settings
  {
    RankingRules = new[]
    {
      "words",
      "typo",
      "proximity",
      "attribute",
      "sort",
      "exactness",
      "release_date:asc",
      "rank:desc"
    }
  };
  await client.Index("movies").UpdateSettingsAsync(newSettings);
settings_guide_distinct_1: |-
  var newSettings = new Settings
  {
  	DistinctAttribute = "product_id"
  };
  await client.Index("jackets").UpdateSettingsAsync(newSettings);
settings_guide_searchable_1: |-
  var newSettings = new Settings
  {
  	SearchableAttributes = new[]
  	{
      "title",
      "overview",
      "genres"
  	}
  };
  await client.Index("movies").UpdateSettingsAsync(newSettings);
settings_guide_displayed_1: |-
  var newSettings = new Settings
  {
  	DisplayedAttributes = new[]
  	{
      "title",
      "overview",
      "genres",
      "release_date"
  	}
  };
  await client.Index("movies").UpdateSettingsAsync(newSettings);
settings_guide_sortable_1: |-
  var newSettings = new Settings
  {
      SortableAttributes = new string[] { "price", "author" },
  };
  await client.Index("meteorites").UpdateSettingsAsync(newSettings);
documents_guide_add_movie_1: |-
  var movie = new[]
  {
      new Movie { MovieId = "123sq178", Title = "Amelie Poulain" }
  };
  await index.AddDocumentsAsync(movie);
getting_started_add_documents_md: |-
  ```bash
  dotnet add package Meilisearch
  ```

  ```csharp
  using System.IO;
  using System.Text.Json;
  using Meilisearch;
  using System.Threading.Tasks;
  using System.Collections.Generic;

  namespace Meilisearch_demo
  {
      public class Movie
      {
          public string Id { get; set; }
          public string Title { get; set; }
          public string Poster { get; set; }
          public string Overview { get; set; }
          public IEnumerable<string> Genres { get; set; }
      }

      internal class Program
      {
          static async Task Main(string[] args)
          {
              MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
              var options = new JsonSerializerOptions
              {
                  PropertyNameCaseInsensitive = true
              };

              string jsonString = await File.ReadAllTextAsync("movies.json");
              var movies = JsonSerializer.Deserialize<IEnumerable<Movie>>(jsonString, options);

              var index = client.Index("movies");
              await index.AddDocumentsAsync<Movie>(movies);
          }
      }
  }
  ```
  [About this SDK](https://www.github.com/meilisearch/meilisearch-dotnet)
getting_started_check_task_status: |-
  TaskInfo task = await client.GetTaskAsync(0);
getting_started_search_md: |-
  ```csharp
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  var index = client.Index("movies");

  SearchResult<Movie> movies = await index.SearchAsync<Movie>(new SearchQuery("harry pottre"));
  foreach (var movie in movies.Hits)
  {
      Console.WriteLine(movie.Title);
  }
  ```
  [About this SDK](https://www.github.com/meilisearch/meilisearch-dotnet)
getting_started_add_meteorites: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  var options = new JsonSerializerOptions
  {
      PropertyNameCaseInsensitive = true
  };

  string jsonString = await File.ReadAllTextAsync("meteorites.json");
  var meteorites = JsonSerializer.Deserialize<IEnumerable<Meteorite>>(jsonString, options);

  var index = client.Index("meteorites");
  await index.AddDocumentsAsync<Meteorite>(meteorites);
getting_started_update_ranking_rules: |-
  await client.Index("movies").UpdateRankingRulesAsync(new string[] {
    "exactness",
    "words",
    "typo",
    "proximity",
    "attribute",
    "sort",
    "release_date:asc",
    "rank:desc"
  });
getting_started_update_displayed_attributes: |-
  await client.Index("movies").UpdateDisplayedAttributesAsync(new string[] {
    "title",
    "overview",
    "poster"
  });
getting_started_update_searchable_attributes: |-
  await client.Index("movies").UpdateSearchableAttributesAsync(new string[] {
    "title"
  });
getting_started_update_stop_words: |-
  await client.Index("movies").UpdateStopWordsAsync(new string[] {
    "the"
  });
getting_started_synonyms: |-
  var newSynonyms = new Dictionary<string, IEnumerable<string>>
  {
      { "winnie", new string[] { "piglet" } },
      { "piglet", new string[] { "winnie" } },
  };
  await client.Index("movies").UpdateSynonymsAsync(newSynonyms);
getting_started_filtering: |-
  SearchQuery filter = new SearchQuery("") { Filter = "mass < 200" };
  await client.Index("meteorites").SearchAsync<Meteorite>(filter);
getting_started_geo_radius: |-
  SearchQuery filter = new SearchQuery("") { Filter = "_geoRadius(46.9480, 7.4474, 210000)" };
  await client.Index("meteorites").SearchAsync<Meteorite>(filter);
getting_started_geo_point: |-
  SearchQuery sort = new SearchQuery("") { Sort = new string[] { "_geoPoint(48.8583701,2.2922926):asc" }};
  await client.Index("meteorites").SearchAsync<Meteorite>(sort);
getting_started_sorting: |-
  SearchQuery searchQuery = new SearchQuery("") {
    Sort = new string[] { "mass:asc" },
    Filter = "mass < 200",
  };
  await client.Index("meteorites").SearchAsync<Meteorite>(searchQuery);
getting_started_configure_settings: |-
  var newSettings = new Settings
  {
      FilterableAttributes = new string[] { "mass", "_geo" },
      SortableAttributes = new string[] { "mass", "_geo" },
  };
  await client.Index("meteorites").UpdateSettingsAsync(newSettings);
getting_started_communicating_with_a_protected_instance: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "apiKey");

  await client.Index("Movies").SearchAsync<Movie>(new SearchQuery(""));
faceted_search_update_settings_1: |-
  await client.Index("movies").UpdateFilterableAttributesAsync(new [] { "director", "genres" });
faceted_search_filter_1: |-
  SearchQuery filters = new SearchQuery("thriller")
  {
      Filter = new string[][]
      {
          new string[] {"genres = Horror", "genres = Mystery"},
          new string[] {"director = \"Jordan Peele\""}
      }
  };

  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>(filters);
faceted_search_facets_1: |-
  SearchQuery filters = new SearchQuery("Batman")
  {
      Facets = new string[] { "genres" }
  };

  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>(filters);
faceted_search_walkthrough_filter_1: |-
  var sq = new SearchQuery("thriller")
  {
  	Filter = "(genre = 'Horror' AND genre = 'Mystery') OR director = 'Jordan Peele'"
  };
  await client.Index("movies").SearchAsync<Movie>(sq);
add_movies_json_1: |-
  // Make sure to add this using to your code
  using System.IO;

  var jsonDocuments = await File.ReadAllTextAsync("movies.json");
  await client.Index("movies").AddDocumentsJsonAsync(jsonDocuments);
landing_getting_started_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");

  var documents = new Movie[] {
      new Movie { Id = "1", Title = "Carol" },
      new Movie { Id = "2", Title = "Wonder Woman" },
      new Movie { Id = "3", Title = "Life of Pi" },
      new Movie { Id = "4", Title = "Mad Max: Fury Road" },
      new Movie { Id = "5", Title = "Moana", ", "Action" },
      new Movie { Id = "6", Title = "Philadelphia" }
  };

  var task = await client.Index("movies").AddDocumentsAsync<Movie>(documents);
post_dump_1: |-
  await client.CreateDumpAsync();
phrase_search_1: |-
  await client.Index("movies").SearchAsync<Movie>(new SearchQuery("\"african american\" horror"));
sorting_guide_update_sortable_attributes_1: |-
  await client.Index("books").UpdateSortableAttributesAsync(new [] { "price", "author" });
sorting_guide_update_ranking_rules_1: |-
  await client.Index("books").UpdateRankingRulesAsync(new[]
  {
  	"words",
  	"sort",
  	"typo",
  	"proximity",
  	"attribute",
  	"exactness"
  });
sorting_guide_sort_parameter_1: |-
  var sq = new SearchQuery("science fiction")
  {
    Sort = new[] { "price:asc" },
  };
  await client.Index("books").SearchAsync<Book>(sq);
sorting_guide_sort_parameter_2: |-
  var sq = new SearchQuery("butler")
  {
    Sort = new[] { "author:desc" },
  };
  await client.Index("books").SearchAsync<Book>(sq);
get_sortable_attributes_1: |-
  await client.Index("books").GetSortableAttributesAsync();
update_sortable_attributes_1: |-
  await client.Index("books").UpdateSortableAttributesAsync(new [] { "price", "author" });
reset_sortable_attributes_1: |-
  await client.Index("books").ResetSortableAttributesAsync();
search_parameter_guide_sort_1: |-
  var sq = new SearchQuery("science fiction")
  {
    Sort = new[] { "price:asc" },
  };
  await client.Index("books").SearchAsync<Book>(sq);
geosearch_guide_filter_settings_1: |-
  List<string> attributes = new() { "_geo" };
  TaskInfo result = await client.Index("movies").UpdateFilterableAttributesAsync(attributes);
geosearch_guide_filter_usage_1: |-
  SearchQuery filters = new SearchQuery("") { Filter = "_geoRadius(45.472735, 9.184019, 2000)" };
  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>(filters);
geosearch_guide_filter_usage_2: |-
  SearchQuery filters = new SearchQuery("restaurants")
  {
      Filter = new string[] { "_geoRadius(45.472735, 9.184019, 2000) AND type = pizza" }
  };

  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>(filters);
geosearch_guide_sort_settings_1: |-
  List<string> attributes = new() { "_geo" };
  TaskInfo result = await client.Index("restaurants").UpdateSortableAttributesAsync(attributes);
geosearch_guide_sort_usage_1: |-
  SearchQuery filters = new SearchQuery("")
  {
      Sort = new string[] { "_geoPoint(48.8561446,2.2978204):asc" }
  };

  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>(filters);
geosearch_guide_sort_usage_2: |-
  SearchQuery filters = new SearchQuery("restaurants")
  {
      Sort = new string[] {
            "_geoPoint(48.8561446,2.2978204):asc",
            "rating:desc"
      }
  };

  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>(filters);
primary_field_guide_create_index_primary_key: |-
  TaskInfo task = await client.CreateIndexAsync("books", "reference_number");
primary_field_guide_update_document_primary_key: |-
  TaskInfo task = await client.UpdateIndexAsync("books", "title");
primary_field_guide_add_document_primary_key: |-
  await index.AddDocumentsAsync(
    new[] {
        new Book {
            ReferenceNumber = 287947,
            Title = "Diary of a Wimpy Kid",
            Author = "Jeff Kinney",
            Genres = new string[] { "comedy", "humor" },
            Price = 5.00
        }
    },
    "reference_number");
authorization_header_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  var keys = await client.GetKeysAsync();
get_one_key_1: |-
  Key key = await client.GetKeyAsync("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4");
get_all_keys_1: |-
  ResourceResults<Key> keyResult = await client.GetKeysAsync(new KeysQuery { Limit = 3 });
create_a_key_1: |-
  Key keyOptions = new Key
  {
      Description = "Add documents: Products API key",
      Actions = new KeyAction[] { KeyAction.DocumentsAdd },
      Indexes = new string[] { "products" },
      ExpiresAt = DateTime.Parse("2042-04-02T00:42:42Z")
  };
  Key createdKey = await this.client.CreateKeyAsync(keyOptions);
update_a_key_1: |-
  await client.UpdateKeyAsync(
    "6062abda-a5aa-4414-ac91-ecd7944c0f8d",
    description: "Manage documents: Products/Reviews API key",
    name: "Products/Reviews API key"
  )
delete_a_key_1: |-
  client.DeleteKeyAsync("6062abda-a5aa-4414-ac91-ecd7944c0f8d")
security_guide_search_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "apiKey");
  SearchResult<Patient> searchResult = await client.Index("patient_medical_records").SearchAsync<Patient>(new SearchQuery(""));
security_guide_update_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  await client.UpdateKeyAsync("74c9c733-3368-4738-bbe5-1d18a5fecb37", description: "Default Search API Key");
security_guide_create_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  Key keyOptions = new Key
  {
      Description = "Search patient records key",
      Actions = new string[] { "search" },
      Indexes = new string[] { "patient_medical_records" },
      ExpiresAt = DateTime.Parse("2023-01-01T00:00:00Z")
  };
  Key createdKey = await this.client.CreateKeyAsync(keyOptions);
security_guide_list_keys_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  ResourceResults<Key> keyResult = await client.GetKeysAsync();
  var keys = keyResult.Result;
security_guide_delete_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  client.DeleteKeyAsync("ac5cd97d-5a4b-4226-a868-2d0eb6d197ab")
tenant_token_guide_generate_sdk_1: |-
  var apiKey = "B5KdX2MY2jV6EXfUs6scSfmC...";
  var expiresAt = new DateTime(2025, 12, 20);
  var searchRules = new TenantTokenRules(new Dictionary<string, object> {
    { "patient_medical_records", new Dictionary<string, object> { { "filter", "user_id = 1" } } }
  });

  token = client.GenerateTenantToken(
    searchRules,
    apiKey: apiKey // optional,
    expiresAt: expiresAt // optional
  );
tenant_token_guide_search_sdk_1: |-
  frontEndClient = new MeilisearchClient("http://localhost:7700", token);
  SearchResult<Patient> searchResult = await frontEndClient.Index("patient_medical_records").SearchAsync<Patient>(new SearchQuery("blood test"));
getting_started_typo_tolerance: |-
  var typoTolerance = new TypoTolerance {
    MinWordSizeTypos = new TypoTolerance.TypoSize {
      OneTypo = 4
    }
  };

  await client.Index("movies").UpdateTypoToleranceAsync(typoTolerance);
get_typo_tolerance_1:
  await client.Index("books").GetTypoToleranceAsync();
update_typo_tolerance_1: |-
  var typoTolerance = new TypoTolerance {
    DisableOnAttributes = new string[] { "title" },
    MinWordSizeTypos = new TypoTolerance.TypoSize {
        OneTypo = 4,
        TwoTypos = 10
    }
  };

  await client.Index("books").UpdateTypoToleranceAsync(typoTolerance);
reset_typo_tolerance_1: |-
  await client.Index("books").ResetTypoToleranceAsync();
typo_tolerance_guide_1: |-
  var typoTolerance = new TypoTolerance {
    Enabled = false
  };

  await client.Index("movies").UpdateTypoToleranceAsync(typoTolerance);
typo_tolerance_guide_2: |-
  var typoTolerance = new TypoTolerance {
    DisableOnAttributes = new string[] { "title" }
  };

  await client.Index("movies").UpdateTypoToleranceAsync(typoTolerance);
typo_tolerance_guide_3: |-
  var typoTolerance = new TypoTolerance {
    DisableOnWords = new string[] { "shrek" }
  };

  await client.Index("movies").UpdateTypoToleranceAsync(typoTolerance);
typo_tolerance_guide_4: |-
  var typoTolerance = new TypoTolerance {
    MinWordSizeTypos = new TypoTolerance.TypoSize {
      OneTypo = 4,
      TwoTypos = 10
    }
  };

  await client.Index("movies").UpdateTypoToleranceAsync(typoTolerance);
settings_guide_typo_tolerance_1: |-
  var typoTolerance = new TypoTolerance {
    DisableOnAttributes = new string[] { "title" },
    MinWordSizeTypos = new TypoTolerance.TypoSize {
      TwoTypos = 12
    }
  };

  await client.Index("movies").UpdateTypoToleranceAsync(typoTolerance);
get_all_tasks_filtering_1: |-
  ResourceResults<TaskInfo> taskResult = await client.Index("movies").GetTasksAsync();
  // OR
  ResourceResults<TaskInfo> taskResult = await client.GetTasksAsync(new TasksQuery { IndexUid = "movies" });
get_all_tasks_filtering_2: |-
  ResourceResults<TaskInfo> taskResult = await client.GetTasksAsync(new TasksQuery {
    Status = new List<TaskInfoStatus>() { TaskInfoStatus.Succeeded, TaskInfoStatus.Failed },
    Types = new List<TaskInfoType>() { TaskInfoType.DocumentAdditionOrUpdate },
  });
get_all_tasks_paginating_1: |-
  ResourceResults<TaskInfo> taskResult = await client.GetTasksAsync(new TasksQuery { Limit = 2, From = 10 });
get_all_tasks_paginating_2: |-
  ResourceResults<TaskInfo> taskResult = await client.GetTasksAsync(new TasksQuery { Limit = 2, From = 8 });
get_pagination_settings_1: |-
update_pagination_settings_1: |-
reset_pagination_settings_1: |-
get_faceting_settings_1: |-
update_faceting_settings_1: |-
reset_faceting_settings_1: |-
settings_guide_faceting_1: |-
settings_guide_pagination_1: |-
