# This code-samples file is used by the Meilisearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
list_all_indexes_1: |-
create_an_index_1: |-
update_an_index_1: |-
delete_an_index_1: |-
get_one_document_1: |-
get_documents_1: |-
add_or_replace_documents_1: |-
add_or_update_documents_1: |-
delete_all_documents_1: |-
delete_one_document_1: |-
delete_documents_1: |-
search_post_1: |-
get_task_by_index_1: |-
  TaskInfo task = await client.Index("movies").GetTaskAsync(1);
get_all_tasks_by_index_1: |-
  Result taskResult = await client.Index("movies").GetTasksAsync();
  var tasks = taskResult.Result;
get_task_1: |
  TaskInfo task = await client.GetTaskAsync(1);
get_all_tasks_1: |
  Result taskResult = await client.GetTasksAsync();
  var tasks = taskResult.Result;
get_settings_1: |-
update_settings_1: |-
reset_settings_1: |-
get_synonyms_1: |-
update_synonyms_1: |-
reset_synonyms_1: |-
get_stop_words_1: |-
update_stop_words_1: |-
reset_stop_words_1: |-
get_ranking_rules_1: |-
update_ranking_rules_1: |-
reset_ranking_rules_1: |-
get_distinct_attribute_1: |-
  string result = await client.Index("shoes").GetDistinctAttributeAsync();
update_distinct_attribute_1: |-
  TaskInfo result = await client.Index("shoes").UpdateDistinctAttributeAsync("skuid");
reset_distinct_attribute_1: |-
  TaskInfo result = await client.Index("shoes").ResetDistinctAttributeAsync();
get_searchable_attributes_1: |-
update_searchable_attributes_1: |-
reset_searchable_attributes_1: |-
get_filterable_attributes_1: |-
  IEnumerable<string> attributes = await client.Index("movies").GetFilterableAttributesAsync();
update_filterable_attributes_1: |-
  List<string> attributes = new() { "genres", "director" };
  TaskInfo result = await client.Index("movies").UpdateFilterableAttributesAsync(attributes);
reset_filterable_attributes_1: |-
  TaskInfo result = await client.Index("movies").ResetFilterableAttributesAsync();
get_displayed_attributes_1: |-
update_displayed_attributes_1: |-
reset_displayed_attributes_1: |-
get_index_stats_1: |-
get_indexes_stats_1: |-
get_health_1: |-
get_version_1: |-
distinct_attribute_guide_1: |-
field_properties_guide_searchable_1: |-
field_properties_guide_displayed_1: |-
filtering_guide_1: |-
  SearchQuery filters = new SearchQuery() { Filter = "release_date > \"795484800\"" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>("Avengers", filters);
filtering_guide_2: |-
  SearchQuery filters = new SearchQuery() { Filter = "release_date > 795484800 AND (director =
  \"Tim Burton\" OR director = \"Christopher Nolan\")" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>("Batman", filters);
filtering_guide_3: |-
  SearchQuery filters = new SearchQuery() { Filter = "director = \"Jordan Peele\"" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>("horror", filters);
filtering_guide_4: |-
  SearchQuery filters = new SearchQuery() { Filter = "rating >= 3 AND (NOT director = \"Tim Burton\"" };
  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>("Planet of the Apes", filters);
search_parameter_guide_query_1: |-
search_parameter_guide_offset_1: |-
search_parameter_guide_limit_1: |-
search_parameter_guide_retrieve_1: |-
search_parameter_guide_crop_1: |-
search_parameter_guide_highlight_1: |-
search_parameter_guide_filter_1: |-
search_parameter_guide_filter_2: |-
search_parameter_guide_matches_1: |-
settings_guide_synonyms_1: |-
settings_guide_stop_words_1: |-
settings_guide_ranking_rules_1: |-
settings_guide_distinct_1: |-
settings_guide_searchable_1: |-
settings_guide_displayed_1: |-
documents_guide_add_movie_1: |-
search_guide_1: |-
search_guide_2: |-
getting_started_add_documents_md: |-
  ```bash
  dotnet add package MeiliSearch
  ```

  ```csharp
  using System.IO;
  using System.Text.Json;
  using Meilisearch;
  using System.Threading.Tasks;
  using System.Collections.Generic;

  namespace Meilisearch_demo
  {
      public class Movie
      {
          public string Id { get; set; }
          public string Title { get; set; }
          public string Poster { get; set; }
          public string Overview { get; set; }
          public IEnumerable<string> Genres { get; set; }
      }

      internal class Program
      {
          static async Task Main(string[] args)
          {
              MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
              var options = new JsonSerializerOptions
              {
                  PropertyNameCaseInsensitive = true
              };

              string jsonString = await File.ReadAllTextAsync("movies.json");
              var movies = JsonSerializer.Deserialize<IEnumerable<Movie>>(jsonString, options);

              var index = client.Index("movies");
              await index.AddDocumentsAsync<Movie>(movies);
          }
      }
  }
  ```
  [About this SDK](https://www.github.com/meilisearch/meilisearch-dotnet)
getting_started_search_md: |-
  ```csharp
  MeilisearchClient client = new MeilisearchClient("http://localhost:7700", "masterKey");
  var index = client.Index("movies");

  SearchResult<Movie> movies = await index.SearchAsync<Movie>("harry pottre");
  foreach (var movie in movies.Hits)
  {
      Console.WriteLine(movie.Title);
  }
  ```
  [About this SDK](https://www.github.com/meilisearch/meilisearch-dotnet)
faceted_search_update_settings_1: |-
faceted_search_filter_1: |-
  SearchQuery filters = new SearchQuery()
  {
      Filter = new string[][]
      {
          new string[] {"genres = Horror", "genres = Mystery"},
          new string[] {"director = \"Jordan Peele\""}
      }
  };

  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>("thriller", filters);
faceted_search_facets_distribution_1: |-
  SearchQuery filters = new SearchQuery()
  {
      FacetsDistribution = new string[] { "genres" }
  };

  SearchResult<Movie> movies = await client.Index("movies").SearchAsync<Movie>("Batman", filters);
faceted_search_walkthrough_filterable_attributes_1: |-
faceted_search_walkthrough_filter_1: |-
faceted_search_walkthrough_facets_distribution_1: |-
add_movies_json_1: |-
post_dump_1: |-
get_dump_status_1: |-
phrase_search_1: |-
sorting_guide_update_sortable_attributes_1: |-
sorting_guide_update_ranking_rules_1: |-
sorting_guide_sort_parameter_1: |-
sorting_guide_sort_parameter_2: |-
get_sortable_attributes_1: |-
update_sortable_attributes_1: |-
reset_sortable_attributes_1: |-
search_parameter_guide_sort_1: |-
geosearch_guide_filter_settings_1: |-
  List<string> attributes = new() { "_geo" };
  TaskInfo result = await client.Index("movies").UpdateFilterableAttributesAsync(attributes);
geosearch_guide_filter_usage_1: |-
  SearchQuery filters = new SearchQuery() { Filter = "_geoRadius(45.4628328, 9.1076931, 2000)" };
  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>("", filters);
geosearch_guide_filter_usage_2: |-
  SearchQuery filters = new SearchQuery()
  {
      Filter = new string[] { "_geoRadius(45.4628328, 9.1076931, 2000) AND type = pizza" }
  };

  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>("restaurants", filters);
geosearch_guide_sort_settings_1: |-
  List<string> attributes = new() { "_geo" };
  TaskInfo result = await client.Index("restaurants").UpdateSortableAttributesAsync(attributes);
geosearch_guide_sort_usage_1: |-
  SearchQuery filters = new SearchQuery()
  {
      Sort = new string[] { "_geoPoint(48.8583701,2.2922926):asc" }
  };

  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>("", filters);
geosearch_guide_sort_usage_2: |-
  SearchQuery filters = new SearchQuery()
  {
      Sort = new string[] {
            "_geoPoint(48.8583701,2.2922926):asc",
            "rating:desc"
      }
  };

  SearchResult<Restaurant> restaurants = await client.Index("restaurants").SearchAsync<Restaurant>("restaurants", filters);
authorization_header_1: |-
  MeilisearchClient client = new MeilisearchClient("http://127.0.0.1:7700", "masterKey");
  var keys = await client.GetKeysAsync();
get_one_key_1: |-
  Key key = await client.GetKeyAsync("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4");
get_all_keys_1: |-
  Result keyResult = await client.GetKeysAsync();
  var keys = keyResult.Result;
create_a_key_1: |-
  Key keyOptions = new Key
  {
      Description = "Add documents: Products API key",
      Actions = new string[] { "documents.add" },
      Indexes = new string[] { "products" },
      ExpiresAt = DateTime.Parse("2042-04-02T00:42:42Z")
  };
  Key createdKey = await this.client.CreateKeyAsync(keyOptions);
update_a_key_1: |-
  // Not implemented yet
delete_a_key_1: |-
  client.DeleteKeyAsync("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4")
security_guide_search_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://127.0.0.1:7700", "apiKey");
  SearchResult<Patient> searchResult = await client.Index("patient_medical_records").SearchAsync<Patient>();
security_guide_update_key_1: |-
  // Not implemented yet
security_guide_create_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://127.0.0.1:7700", "masterKey");
  Key keyOptions = new Key
  {
      Description = "Search patient records key",
      Actions = new string[] { "search" },
      Indexes = new string[] { "patient_medical_records" },
      ExpiresAt = DateTime.Parse("2023-01-01T00:00:00Z")
  };
  Key createdKey = await this.client.CreateKeyAsync(keyOptions);
security_guide_list_keys_1: |-
  MeilisearchClient client = new MeilisearchClient("http://127.0.0.1:7700", "masterKey");
  Result keyResult = await client.GetKeysAsync();
  var keys = keyResult.Result;
security_guide_delete_key_1: |-
  MeilisearchClient client = new MeilisearchClient("http://127.0.0.1:7700", "masterKey");
  client.DeleteKeyAsync("d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4")
tenant_token_guide_generate_sdk_1: |-
  var apiKey = "B5KdX2MY2jV6EXfUs6scSfmC...";
  var expiresAt = new DateTime(2025, 12, 20);
  var searchRules = new TenantTokenRules(new Dictionary<string, object> {
    { "patient_medical_records", new Dictionary<string, object> { { "filter", "user_id = 1" } } }
  });

  token = client.GenerateTenantToken(
    searchRules,
    apiKey: apiKey // optional,
    expiresAt: expiresAt // optional
  );
tenant_token_guide_search_sdk_1: |-
  frontEndClient = new MeilisearchClient("http://127.0.0.1:7700", token);
  SearchResult<Patient> searchResult = await frontEndClient.Index("patient_medical_records").SearchAsync<Patient>("blood test");
